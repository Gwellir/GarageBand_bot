# Generated by Django 3.2.3 on 2021-09-23 16:28

from django.db import migrations, models
import django.db.models.deletion

from garage_band_bot.settings import BAZAAR_FILTER_LIVE_TOKEN, BAZAAR_FILTER_TEST_TOKEN, TESTING_GROUP_ID, BAZAAR_TEST_PUBLISH_ID, \
    BAZAAR_PUBLISH_ID, ADMIN_GROUP_ID


def delete_bots(apps, schema_editor):
    BotTable = apps.get_model("tgbot", "MessengerBot")
    TGITable = apps.get_model("tgbot", "TelegramInstance")
    db_alias = schema_editor.connection.alias
    TGITable.objects.using(db_alias).delete(id__in=[5, 6])
    BotTable.objects.using(db_alias).delete(id__in=[5, 6])


def add_bots(apps, schema_editor):
    BotTable = apps.get_model("tgbot", "MessengerBot")
    TGITable = apps.get_model("tgbot", "TelegramInstance")
    db_alias = schema_editor.connection.alias
    TGITable.objects.using(db_alias).bulk_create([
        TGITable(
            id=5,
            token=BAZAAR_FILTER_TEST_TOKEN,
            publish_id=BAZAAR_TEST_PUBLISH_ID,
            publish_name="GBBazaarTest",
            admin_group_id=TESTING_GROUP_ID,
        ),
        TGITable(
            id=6,
            token=BAZAAR_FILTER_LIVE_TOKEN,
            publish_id=BAZAAR_PUBLISH_ID,
            publish_name="OP_Bazar",
            admin_group_id=ADMIN_GROUP_ID,
        ),
    ])
    BotTable.objects.using(db_alias).bulk_create([
        BotTable(
            id=5,
            name="Фильтр базар",
            bound_object="BazaarFilter",
            is_active=True,
            is_debug=True,
            telegram_instance_id=5,
            bound_app="filterapp",
        ),
        BotTable(
            id=6,
            name="Фильтр базар LIVE",
            bound_object="BazaarFilter",
            is_active=True,
            is_debug=False,
            telegram_instance_id=6,
            bound_app="filterapp",
        ),
    ])


def fill_stages(apps, schema_editor):
    BFS = apps.get_model("filterapp", "BazaarFilterStage")
    db_alias = schema_editor.connection.alias
    BFS.objects.using(db_alias).bulk_create([
       BFS(name="welcome", processor="StartInputProcessor", reply_pattern="", buttons="{}"),
       BFS(name="check_subscription", processor="SubCheckProcessor", reply_pattern="", buttons="{}"),
       BFS(name="get_low_price", processor="LowPriceInputProcessor", reply_pattern="", buttons="{}"),
       BFS(name="get_high_price", processor="HighPriceInputProcessor", reply_pattern="", buttons="{}"),
       BFS(name="get_regions", processor="RegionMultiSelectProcessor", reply_pattern="", buttons="{}"),
       BFS(name="check_data", processor="SetReadyInputProcessor", reply_pattern="", buttons="{}"),
       BFS(name="done", processor=None, reply_pattern="", buttons="{}"),
    ])


def unmigrate(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('bazaarapp', '0007_alter_salead_description'),
        ('tgbot', '0005_alter_messengerbot_telegram_instance'),
        ('convoapp', '0005_auto_20210818_1548'),
    ]

    operations = [
        migrations.CreateModel(
            name='BazaarFilterStage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', max_length=50, verbose_name='Наименование')),
                ('processor', models.CharField(max_length=50, null=True, verbose_name='Процессор обработки')),
                ('reply_pattern', models.TextField(null=True, verbose_name='Шаблон ответа')),
                ('buttons', models.JSONField(null=True, verbose_name='Набор кнопок')),
            ],
        ),
        migrations.RunPython(
            code=fill_stages,
            reverse_code=unmigrate,
        ),
        migrations.CreateModel(
            name='BazaarFilter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Время создания')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='Время последней активности')),
                ('low_price', models.PositiveIntegerField(db_index=True, null=True, verbose_name='Нижний предел цены')),
                ('high_price', models.PositiveIntegerField(db_index=True, null=True, verbose_name='Верхний предел цены')),
                ('is_complete', models.BooleanField(db_index=True, default=False, verbose_name='Флаг готовности фильтра')),
                ('is_discarded', models.BooleanField(db_index=True, default=False, verbose_name='Флаг отказа от формирования фильтра')),
                ('stage', models.ForeignKey(default=1, null=True, on_delete=django.db.models.deletion.SET_NULL, to='filterapp.bazaarfilterstage')),
                ('dialog', models.OneToOneField(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bound_bazaarfilter', to='convoapp.dialog')),
                ('regions', models.ManyToManyField(to='tgbot.Region', verbose_name='Регионы')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='filters', to='tgbot.botuser', verbose_name='Пользователь')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RegisteredBazaarFilter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Время создания')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='Время последней активности')),
                ('is_active', models.BooleanField(default=True, verbose_name='Фильтр задействован')),
                ('bound', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='registered', to='filterapp.bazaarfilter')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RunPython(
            code=add_bots,
            reverse_code=delete_bots,
        ),
    ]
