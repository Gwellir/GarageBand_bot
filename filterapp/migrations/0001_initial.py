# Generated by Django 3.2.3 on 2021-09-23 16:28
from functools import partial

from django.db import migrations, models
import django.db.models.deletion

from garage_band_bot.settings import (
    BAZAAR_FILTER_LIVE_TOKEN,
    BAZAAR_FILTER_TEST_TOKEN,
    TESTING_GROUP_ID,
    BAZAAR_TEST_PUBLISH_ID,
    BAZAAR_PUBLISH_ID,
    ADMIN_GROUP_ID
)
from utils.migrate import fill_rows, add_bots, delete_bots

BAZAAR_FILTER_BOTS = [
    dict(
        name="Фильтр базар",
        bound_object="BazaarFilter",
        is_active=True,
        is_debug=True,
        bound_app="filterapp",
        instance=dict(
            token=BAZAAR_FILTER_TEST_TOKEN,
            publish_id=BAZAAR_TEST_PUBLISH_ID,
            publish_name="GBBazaarTest",
            admin_group_id=TESTING_GROUP_ID,
        ),
    ),
    dict(
        name="Фильтр базар LIVE",
        bound_object="BazaarFilter",
        is_active=True,
        is_debug=False,
        bound_app="filterapp",
        instance=dict(
            token=BAZAAR_FILTER_LIVE_TOKEN,
            publish_id=BAZAAR_PUBLISH_ID,
            publish_name="OP_Bazar",
            admin_group_id=ADMIN_GROUP_ID,
        ),
    ),
]


STAGES = [
    dict(name="welcome", processor="StartInputProcessor", reply_pattern="", buttons="{}"),
    dict(name="check_subscription", processor="SubCheckProcessor", reply_pattern="", buttons="{}"),
    dict(name="get_low_price", processor="LowPriceInputProcessor", reply_pattern="", buttons="{}"),
    dict(name="get_high_price", processor="HighPriceInputProcessor", reply_pattern="", buttons="{}"),
    dict(name="get_regions", processor="RegionMultiSelectProcessor", reply_pattern="", buttons="{}"),
    dict(name="check_data", processor="SetReadyInputProcessor", reply_pattern="", buttons="{}"),
    dict(name="done", processor=None, reply_pattern="", buttons="{}"),
]


class Migration(migrations.Migration):

    dependencies = [
        ('bazaarapp', '0007_alter_salead_description'),
        ('tgbot', '0005_alter_messengerbot_telegram_instance'),
        ('convoapp', '0005_auto_20210818_1548'),
    ]

    operations = [
        migrations.CreateModel(
            name='BazaarFilterStage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', max_length=50, verbose_name='Наименование')),
                ('processor', models.CharField(max_length=50, null=True, verbose_name='Процессор обработки')),
                ('reply_pattern', models.TextField(null=True, verbose_name='Шаблон ответа')),
                ('buttons', models.JSONField(null=True, verbose_name='Набор кнопок')),
            ],
        ),
        migrations.RunPython(
            code=partial(fill_rows, model_name="filterapp.BazaarFilterStage", rows_data=STAGES),
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.CreateModel(
            name='BazaarFilter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Время создания')),
                ('updated_at', models.DateTimeField(
                    auto_now=True, db_index=True, verbose_name='Время последней активности')
                 ),
                ('low_price', models.PositiveIntegerField(
                    db_index=True, null=True, verbose_name='Нижний предел цены')
                 ),
                ('high_price', models.PositiveIntegerField(
                    db_index=True, null=True, verbose_name='Верхний предел цены')
                 ),
                ('is_complete', models.BooleanField(
                    db_index=True, default=False, verbose_name='Флаг готовности фильтра')
                 ),
                ('is_discarded', models.BooleanField(
                    db_index=True, default=False, verbose_name='Флаг отказа от формирования фильтра')
                 ),
                (
                    'stage',
                    models.ForeignKey(
                        default=1,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to='filterapp.bazaarfilterstage'
                    )
                ),
                (
                    'dialog',
                    models.OneToOneField(
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name='bound_bazaarfilter',
                        to='convoapp.dialog'
                    )
                ),
                ('regions', models.ManyToManyField(to='tgbot.Region', verbose_name='Регионы')),
                (
                    'user',
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='filters',
                        to='tgbot.botuser',
                        verbose_name='Пользователь'
                    )
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RegisteredBazaarFilter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Время создания')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='Время последней активности')),
                ('is_active', models.BooleanField(default=True, verbose_name='Фильтр задействован')),
                ('bound', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='registered', to='filterapp.bazaarfilter')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RunPython(
            code=partial(add_bots, bots=BAZAAR_FILTER_BOTS),
            reverse_code=partial(delete_bots, names=[bot.get("name") for bot in BAZAAR_FILTER_BOTS]),
        ),
    ]
