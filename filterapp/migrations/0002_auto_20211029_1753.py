# Generated by Django 3.2.3 on 2021-10-29 14:53
from functools import partial

from django.db import migrations, models
import django.db.models.deletion

from garage_band_bot import settings
from utils.migrate import add_bots, delete_bots, fill_rows

BAZAAR_FILTER_BOTS = [
    dict(
        name="Фильтр ремонт",
        bound_object="RepairsFilter",
        is_active=True,
        is_debug=True,
        bound_app="filterapp",
        instance=dict(
            token=settings.REPAIRS_FILTER_TEST_TOKEN,
            publish_id=settings.TESTING_CHANNEL_ID,
            publish_name=settings.TESTING_CHANNEL_NAME,
            admin_group_id=settings.TESTING_GROUP_ID,
        ),
    ),
    dict(
        name="Фильтр ремонт LIVE",
        bound_object="RepairsFilter",
        is_active=True,
        is_debug=False,
        bound_app="filterapp",
        instance=dict(
            token=settings.REPAIRS_FILTER_LIVE_TOKEN,
            publish_id=settings.PUBLISHING_CHANNEL_ID,
            publish_name=settings.PUBLISHING_CHANNEL_NAME,
            admin_group_id=settings.ADMIN_GROUP_ID,
        ),
    ),
]


STAGES = [
    dict(name="welcome", processor="StartInputProcessor", reply_pattern="", buttons="{}"),
    dict(name="check_subscription", processor="SubCheckProcessor", reply_pattern="", buttons="{}"),
    dict(name="get_repair_types", processor="RepairsMultiSelectProcessor", reply_pattern="", buttons="{}"),
    dict(name="get_regions", processor="RegionMultiSelectProcessor", reply_pattern="", buttons="{}"),
    dict(name="check_data", processor="SetReadyInputProcessor", reply_pattern="", buttons="{}"),
    dict(name="done", processor=None, reply_pattern="", buttons="{}"),
]


class Migration(migrations.Migration):

    dependencies = [
        ('convoapp', '0006_alter_message_stage'),
        ('tgbot', '0010_rename_tag_repairstype'),
        ('filterapp', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='RepairsFilterStage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', max_length=50, verbose_name='Наименование')),
                ('processor', models.CharField(max_length=50, null=True, verbose_name='Процессор обработки')),
                ('reply_pattern', models.TextField(null=True, verbose_name='Шаблон ответа')),
                ('buttons', models.JSONField(null=True, verbose_name='Набор кнопок')),
            ],
        ),
        migrations.AlterField(
            model_name='bazaarfilter',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bazaar_filters', to='tgbot.botuser', verbose_name='Пользователь'),
        ),
        migrations.RunPython(
            code=partial(fill_rows, model_name="filterapp.RepairsFilterStage", rows_data=STAGES),
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.CreateModel(
            name='RepairsFilter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Время создания')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='Время последней активности')),
                ('is_complete', models.BooleanField(db_index=True, default=False, verbose_name='Флаг готовности фильтра')),
                ('is_discarded', models.BooleanField(db_index=True, default=False, verbose_name='Флаг отказа от формирования фильтра')),
                ('dialog', models.OneToOneField(default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bound_repairsfilter', to='convoapp.dialog')),
                ('regions', models.ManyToManyField(to='tgbot.Region', verbose_name='Регионы')),
                ('repair_types', models.ManyToManyField(to='tgbot.RepairsType', verbose_name='Виды ремонтов')),
                ('stage', models.ForeignKey(default=1, null=True, on_delete=django.db.models.deletion.SET_NULL, to='filterapp.repairsfilterstage')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='repairs_filters', to='tgbot.botuser', verbose_name='Пользователь')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RegisteredRepairsFilter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Время создания')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='Время последней активности')),
                ('is_active', models.BooleanField(default=True, verbose_name='Фильтр задействован')),
                ('bound', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='registered', to='filterapp.repairsfilter')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.RunPython(
            code=partial(add_bots, bots=BAZAAR_FILTER_BOTS),
            reverse_code=partial(delete_bots, names=[bot.get("name") for bot in BAZAAR_FILTER_BOTS]),
        ),
    ]
