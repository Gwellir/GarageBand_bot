from pathlib import Path

from senders import text_reply

BASE_DIR = Path(__file__).resolve().parent.parent
IMAGE_PATH = BASE_DIR / "tests/clouds-mf.jpg"
STICKER_PATH = BASE_DIR / "tests/sticker.webp"


def check_welcome(answer):
    assert "–Ø –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞—è–≤–æ–∫, –ø–æ–º–æ–≥–∞—é —Ä–∞–∑–º–µ—â–∞—Ç—å –∑–∞—è–≤–∫–∏" in answer.raw_text
    assert answer.button_count == 1
    assert answer.buttons[0][0].text == "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É"


def check_name_request(answer):
    assert answer.button_count == 1
    assert "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞" in answer.raw_text
    assert answer.buttons[0][0].text == "–û—Ç–º–µ–Ω–∏—Ç—å"


def check_request_tag(answer):
    assert answer.button_count == 7
    assert "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–º–æ–Ω—Ç–∞" in answer.raw_text
    assert answer.buttons[0][0].text == "–î–≤–∏–≥–∞—Ç–µ–ª—å/—Ö–æ–¥–æ–≤–∞—è"
    assert answer.buttons[6][0].text == "–û—Ç–º–µ–Ω–∏—Ç—å"


def check_request_car_type(answer):
    assert answer.button_count == 1
    assert "üöò –ö–∞–∫–æ–π —É –≤–∞—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—å?" in answer.raw_text
    assert answer.buttons[0][0].text == "–û—Ç–º–µ–Ω–∏—Ç—å"


def check_request_description(answer):
    assert answer.button_count == 1
    assert "üõ†Ô∏è –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –ø–æ —Ä–∞–±–æ—Ç–∞–º —á—Ç–æ–±—ã –º–∞—Å—Ç–µ—Ä —Å–º–æ–≥" in answer.raw_text
    assert answer.buttons[0][0].text == "–û—Ç–º–µ–Ω–∏—Ç—å"


def check_request_photo(answer):
    assert answer.button_count == 2
    assert "–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, —Ç–∞–∫ –±—É–¥–µ—Ç" in answer.raw_text
    assert answer.buttons[0][0].text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    assert answer.buttons[1][0].text == "–û—Ç–º–µ–Ω–∏—Ç—å"


def check_summary(answers):
    answer1, answer2 = answers
    assert answer1.button_count == 0
    assert "–í—ã –º–æ–ª–æ–¥–µ—Ü!" in answer1.raw_text

    assert answer2.button_count == 2
    assert "#–î–≤–∏–≥–∞—Ç–µ–ª—å_—Ö–æ–¥–æ–≤–∞—è #000" in answer2.raw_text
    assert "üõ†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞" in answer2.raw_text
    assert "üöò –¢–µ—Å—Ç 2021 –≥–æ–¥–∞" in answer2.raw_text
    assert "üñã –í–ª–∞–¥–∏—Å–ª–∞–≤" in answer2.raw_text
    assert answer2.buttons[0][0].text == "‚úÖ –ü—É–±–ª–∏–∫—É–µ–º"
    assert answer2.buttons[0][1].text == "‚ùå –ó–∞–Ω–æ–≤–æ"


def check_finish(answer):
    assert answer.button_count == 3
    assert "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ!" in answer.raw_text
    assert answer.buttons[0][0].text == "–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–∞—à–µ–º—É –ø–æ—Å—Ç—É –≤ –∫–∞–Ω–∞–ª–µ"
    assert answer.buttons[1][0].text == "–û—Ñ–æ—Ä–º–∏—Ç—å –µ—â—ë –∑–∞—è–≤–∫—É"
    assert answer.buttons[2][0].text == "–†–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º—É"


def check_same_reply(answer, warning):
    assert answer.raw_text == warning.raw_text
    assert answer.button_count == warning.button_count


async def send_short_text(conv):
    warning = await text_reply(conv, "A")
    check_too_short(warning)
    return await conv.get_response()


async def send_any_picture(conv):
    warning = await text_reply(conv, "–ö–∞—Ä—Ç–∏–Ω–∫–∞", file=IMAGE_PATH)
    check_not_text(warning)
    return await conv.get_response()


async def send_sticker(conv):
    warning = await text_reply(conv, "", file=STICKER_PATH)
    check_not_image(warning)
    return await conv.get_response()


async def send_long_text(conv):
    warning = await text_reply(conv, "A" * 2000)
    check_too_long(warning)
    return await conv.get_response()


async def send_misinputs_for_welcome(conv):
    answer = await text_reply(conv, "–¢–µ—Å—Ç")
    check_welcome(answer)
    answer = await text_reply(conv, "–¢–µ—Å—Ç", file=IMAGE_PATH)
    check_welcome(answer)
    answer = await text_reply(conv, "–¢–µ—Å—Ç", file=STICKER_PATH)
    check_welcome(answer)
    return answer


async def send_misinputs_for_picture(conv):
    warning = await text_reply(conv, "–¢–µ—Å—Ç")
    check_not_image(warning)
    answer = await conv.get_response()
    check_request_photo(answer)
    warning = await text_reply(conv, "–¢–µ—Å—Ç", file=STICKER_PATH)
    check_not_image(warning)
    answer = await conv.get_response()
    check_request_photo(answer)
    return answer


async def send_misinputs_for_summary(conv):
    warning = await text_reply(conv, "–¢–µ—Å—Ç")
    check_not_button(warning)
    answers = await conv.get_response(), await conv.get_response()
    check_summary(answers)
    warning = await text_reply(conv, "–¢–µ—Å—Ç", file=IMAGE_PATH)
    check_not_button(warning)
    answers = await conv.get_response(), await conv.get_response()
    check_summary(answers)
    warning = await text_reply(conv, "–¢–µ—Å—Ç", file=STICKER_PATH)
    check_not_button(warning)
    answers = await conv.get_response(), await conv.get_response()
    check_summary(answers)
    return answers


MISINPUT_LIST = [
    [send_misinputs_for_welcome],
    [send_short_text, send_long_text, send_any_picture],
    [send_any_picture],
    [send_short_text, send_long_text, send_any_picture],
    [send_short_text, send_long_text, send_any_picture],
    [send_misinputs_for_picture],
    [send_misinputs_for_summary],
    [],
]

STAGE_CHECKS_LIST = [
    check_welcome,
    check_name_request,
    check_request_tag,
    check_request_car_type,
    check_request_description,
    check_request_photo,
    check_summary,
    check_finish,
]


async def check_misinputs(conv, answer, stage):
    reply = answer
    for misinput in MISINPUT_LIST[stage]:
        reply = await misinput(conv)
        STAGE_CHECKS_LIST[stage](reply)
    return reply


def check_too_short(answer):
    assert answer.button_count == 0
    assert "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ –º–µ–Ω–µ–µ" in answer.raw_text


def check_too_long(answer):
    assert answer.button_count == 0
    assert "–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ (" in answer.raw_text


def check_not_text(answer):
    assert answer.button_count == 0
    assert "–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –≤–≤–µ–¥—ë–Ω!" in answer.raw_text


def check_not_image(answer):
    assert answer.button_count == 0
    assert "–ó–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!" in answer.raw_text


def check_not_button(answer):
    assert answer.button_count == 0
    assert "–û–∂–∏–¥–∞–µ—Ç—Å—è –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É!" in answer.raw_text
