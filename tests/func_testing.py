import os

from pytest import mark
from telethon import TelegramClient
from telethon.tl.custom.message import Message

BOT_ID = os.getenv("tested_bot_id")


@mark.asyncio
async def test_start(client: TelegramClient, image, bot_name):
    """–ü—Ä–æ–≤–æ–¥–∏—Ç –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –ø–æ—Å—Ç–∏–Ω–≥–∞ –∑–∞—è–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª."""

    for i in range(1):
        async with client.conversation(bot_name, timeout=5) as conv:
            image_file = open(image, "rb")
            await conv.send_message("/start")

            resp: Message = await conv.get_response()

            assert "–Ø –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞—è–≤–æ–∫, –ø–æ–º–æ–≥–∞—é —Ä–∞–∑–º–µ—â–∞—Ç—å –∑–∞—è–≤–∫–∏" in resp.raw_text
            assert resp.button_count == 1
            assert resp.buttons[0][0].text == "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É"

            await resp.click(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É")

            answer = await conv.get_response()
            assert answer.button_count == 1
            assert "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞" in answer.raw_text
            assert answer.buttons[0][0].text == "–û—Ç–º–µ–Ω–∏—Ç—å"

            await conv.send_message("–í–ª–∞–¥–∏—Å–ª–∞–≤")
            answer = await conv.get_response()

            assert answer.button_count == 7
            assert "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–º–æ–Ω—Ç–∞" in answer.raw_text
            assert answer.buttons[0][0].text == "–î–≤–∏–≥–∞—Ç–µ–ª—å/—Ö–æ–¥–æ–≤–∞—è"
            assert answer.buttons[6][0].text == "–û—Ç–º–µ–Ω–∏—Ç—å"

            await answer.buttons[0][0].click()
            answer = await conv.get_response()

            assert answer.button_count == 1
            assert "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ —Ä–∞–±–æ—Ç—ã –í–∞–º" in answer.raw_text
            assert answer.buttons[0][0].text == "–û—Ç–º–µ–Ω–∏—Ç—å"

            await conv.send_message("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")
            answer = await conv.get_response()

            assert answer.button_count == 2
            assert "–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, —Ç–∞–∫ –±—É–¥–µ—Ç" in answer.raw_text
            assert answer.buttons[0][0].text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
            assert answer.buttons[1][0].text == "–û—Ç–º–µ–Ω–∏—Ç—å"

            await conv.send_message("–ö–∞—Ä—Ç–∏–Ω–∫–∞", file=image_file)
            answer = await conv.get_response()

            assert answer.button_count == 1
            assert "–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ, —Ä–∞–π–æ–Ω–µ" in answer.raw_text
            assert answer.buttons[0][0].text == "–û—Ç–º–µ–Ω–∏—Ç—å"

            await conv.send_message("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")

            answer1 = await conv.get_response()
            assert answer1.button_count == 0
            assert "–í—ã –º–æ–ª–æ–¥–µ—Ü!" in answer1.raw_text

            answer2 = await conv.get_response()
            assert answer2.button_count == 2
            assert "#–î–≤–∏–≥–∞—Ç–µ–ª—å_—Ö–æ–¥–æ–≤–∞—è" in answer2.raw_text
            assert "üõ†Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞" in answer2.raw_text
            assert "üìç –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥" in answer2.raw_text
            assert "–í–ª–∞–¥–∏—Å–ª–∞–≤" in answer2.raw_text
            assert answer2.buttons[0][0].text == "‚úÖ –ü—É–±–ª–∏–∫—É–µ–º"
            assert answer2.buttons[0][1].text == "‚ùå –ó–∞–Ω–æ–≤–æ"

            await answer2.buttons[0][0].click()
            answer = await conv.get_response()

            assert answer.button_count == 3
            assert "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ!" in answer.raw_text
            assert answer.buttons[0][0].text == "–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–∞—à–µ–º—É –ø–æ—Å—Ç—É –≤ –∫–∞–Ω–∞–ª–µ"
            assert answer.buttons[1][0].text == "–û—Ñ–æ—Ä–º–∏—Ç—å –µ—â—ë –∑–∞—è–≤–∫—É"
            assert answer.buttons[2][0].text == "–†–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º—É"
            image_file.close()
